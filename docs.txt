#Intro
it pronounced, ```nu - ma - ro```

#description
 dnuemarol is an Hr as a service tool(HAAS), which manages services like Payrol, Recruitment and Okr services


### problem statement
 -
# Products
 - Recruitment/Talent (pool) process (setup interviews, SMS, Email)
    -+ process multiple cvs (500 - 1000) at the same time
        - Pass an array of params / condition against the uploaded CV with returns the Matched CVs<[Array]>
        - An fileSystem service that can read file(pdf, doc, csv)
    -+ Add talent to db after their interview for future refernce (cv, phone, email, jobRole, year, expectatedSalary)
    -+ send notification(email/sms/phone call) when they're needed
    -+ I need a faster way to sort through applicant cv's
    -+ Automatically send rejection emails to candidates whose cv's do match the criteria or do not pass an interview process.(Mail)
    -+ Automatically let candidates know when their cv's have advanced to the next stage of the interview process(Mail)
 - Payrol process
 - Employee/Member Objective Key Result Process
    -+ Upload csv format of Okr(with metas)
    -+ Manage employee data (bio)
    -+ Add and manage a organization organogram (which will be drawn from an employee Tree from interns to CEO and maybe Investorsdozie)
    -+ Admin view: View Okr by department(model: name, id, no. employee)
    -+ Organization Employee and Admin Dashboard
        -+ filter employee by staffId, name, location, role, phone (a roboust filter system)

 - Data Visualization (Coming Soon)

#Demo
 - Upload a youtube video explaining the concept
 - allocate a limited space for creating beta/sandbox customer account

#Pricing (change currency depending on the geo-local e.g nigeria uses Naira)
 basic ($0.5¢/member/month) 
  - 1000 user/member/employee per $0.5(
  - 5 admins max

 nuema ($1.3¢/member/month)
  - 5000 user/member/employees
  - 10 admins

 Advance ($5.5¢/member/month)
  - 20000 user/member/employee
  - 20 admins

 Customs
  - Schedule a call with admin

#Developer
 - Open api to user that wants to use their UI (employee, payment made)
 - use OpenID token Oauth 2.0

#Models/schema
    ### Recruitment
        - JobManagement: 
            description: Handles job openings
            schema: {user(dnuemarol user id), job{name, description, category, role}, department, status(active, draft), created_at, updated_at}
            routes: ["createJobOpening", "getAllOpening", "getOneOpening", "updateOneOpening, "updateManyOpening"]
        - Jobopeningentries: 
            description: managing entries from candidate filling the job descrription
            schema: {user(candidate), jobopeningId, candidate{name, otherFeild..., uploadcvs}, stages["pending", "under review", "interview", "assessment", "Hr review", "Hired"], created_at, updated_at}
            routes: ["create/initiate", "createMany/initiateMany", "getAll", "getOne", "updateOne", "search", "searchFilter", "sendemail<for every stage passed>", "updateMany", "deleteMany"]
        - JobTracking (Applicant Account - login, Dashboard): coming soon
            description: managing candidate acount in-app
            schema: {user(candidate)}
            routes: ["create/initiate", "createMany/initiateMany", "getAll", "getOne", "updateOne", "updateMany", "deleteMany"]
        - InternalJobManagement: (can be merge with the main Job management entity)
            description: Handles job openings that is only open to staffs (this can be connected to company staff records by staffId)
            schema: {user(dnuemarol user id), job{name, description, category, role}, department, status(active, draft), created_at, updated_at}
            routes: ["createJobOpening", "getAllOpening", "getOneOpening", "updateOneOpening, "updateManyOpening"]
        - HireWithManagement:
            description: Handles the whole process of updating or keep hiring manager or Job post stakeholders in sync
            schema: {user(dnuemarol user id), job{name, description, category, role}, department, status(active, draft), created_at, updated_at}
            routes: ["create", "getAll", "getOneOpening", "updateOneOpening, "updateMany"]
        - poolTalent:
            description: Handles and manages the candidate records, get this record when the applicant apply to any job
            schema: {first_name, last_name, age, gender, yearsOfExperience, jobTitle, status: ("pending", "under review", "interview", "assessment", "Hr review", "Hired"), created_at, updated_at}
            routes: ["initiate", "initiateMany", "getOne", "updateOne, "updateMany", "notifyCandidate<of new openings that matches thier role>"]
        - interviewQATemplate:
            description: Handles and logs interview template/question tailor for each role(gets pull during interview or forwarded to the shortlisted candidate email), Hiring managers set the questions
            schema: {user(Hiring manager), questionType: (APtitude, Competence, PersonalityTest), questions:[{name, answer}], linksToQuestion: "<github link>" status: ("pending", "publish"), created_at, updated_at}
            routes: ["initiate", "initiateMany", "getOne", "updateOne, "updateMany", "sendMailCandidate<of new openings that matches thier role>"]
        - Medical & Background Checks: coming soon
            descript: handle the Checks, checking whether the candidate is a felony or previous job, medical records<not all though>

    ### Payroll
            - payManagement: 
                descrription: manages and generate payroll for the month/week
                schema: {user, name, status(pending, ongoing, completed), create_at, updated_at}
                routeS: ["createMonthly", "getAll"]
            - PayDirect: 
                descrription: manages staff account detail so payment at the end of the month can be made to them directly <integrate to crust<or other bank> payment system>
                schema: {staffId, hrId<person making the payment>}
                routeS: ["paymentIntergration", "genrate payslip"]